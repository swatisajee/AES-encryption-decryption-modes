# -*- coding: utf-8 -*-
"""CBC_128.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gvXE5hnX5Wsx8iOzUD38zIgNmlHeT6Fv
"""

# Code to create AES- 128 bit key and to encrypt and decrypt a text.txt file using AES in CBC mode

import pyaes,  binascii, os, secrets
import time

# Genrating the random key of size 128 bit that is 16 bytes, everytime a new key will be generated when u run this part of the code
key_start= time.time()
key=os.urandom(16)
key_end=time.time()

# to check the total time for key generation 
key_gen_time = (key_end - key_start)*1000000

#print('Genrated 128 bit key for CBC mode : ' + str(key) )
print( 'Key generation time :  ' + str(key_gen_time) +' microseconds' )

print('------------------------------------------------------------------------------')


# Encrypt the 1KB text file stored in the variable plaintext with the given key produced in first step:

#create a initial vector iv of 16bytes ,ALso remember CBC takes in one block size
iv = os.urandom(16)

#read the text file
with open('1kb.txt','rb') as f :
  plaintext = f.read()  
  statinfo = os.stat('1kb.txt')
  f_Size= statinfo.st_size


#perform the AES-256-CTR-Encryption using the text, key and iv. Also the text file must be 16bytes
ency_start = time.time()
encrypter = pyaes.Encrypter(pyaes.AESModeOfOperationCBC(key, iv))

ciphertext = []
for line in open('1kb.txt'):
  ciphertext += encrypter.feed(line)
  #Make a final call to flush any remaining bytes and add padding
ciphertext +=encrypter.feed()
ency_stop = time.time()

#to check total time for encryption
encr_time = (ency_stop - ency_start)*1000000

#write the cipher text into a file
file = open('cipher.txt','w')
file.write(str(ciphertext))


print ('Total time for encryption for 1KB file :' + str(encr_time) +' microseconds' )
total_speed = f_Size/ encr_time
print('Total speed for encryption for 1KB file  : ' + str(total_speed) + '  byte/microseconds')

# Decrypt the ciphertext with the same key for 1 KB
decry_start = time.time()
decrypter = pyaes.Decrypter(pyaes.AESModeOfOperationCBC(key, iv))

for line in open('cipher.txt'):  
  decrypted = decrypter.feed(line)
decry_stop =time.time()

#to check total time for decryption
decry_time = (decry_stop - decry_start)*1000000

#print('Decrypted:', decrypted)
print ('Total time for decryption for 1KB file  :' + str(decry_time) + ' microseconds')
total_speed_1 = f_Size/ decry_time
print('Total speed for decryption for 1KB file  : ' + str(total_speed_1) + '  byte/microsecond')

print('------------------------------------------------------------------------------')

# Encrypt the 10 MB text file stored in the variable plaintext with the given key produced in first step:

# #create a initial vector iv of 16bytes ,ALso remember CBC takes in one block size
# iv = os.urandom(16)

# #read the text file
# with open('10mb.txt','rb') as f :
#   plaintext = f.read()  
#   statinfo = os.stat('10mb.txt')
#   f_Size= statinfo.st_size


# #perform the AES-256-CTR-Encryption using the text, key and iv. Also the text file must be 16bytes
# ency_start = time.time()
# encrypter = pyaes.Encrypter(pyaes.AESModeOfOperationCBC(key, iv))

# ciphertext = []
# for line in open('10mb.txt'):
#   ciphertext += encrypter.feed(line)
#   #Make a final call to flush any remaining bytes and add padding
# ciphertext +=encrypter.feed()
# ency_stop = time.time()

# #to check total time for encryption
# encr_time = (ency_stop - ency_start)*1000000

# #write the cipher text into a file
# file = open('cipher_2.txt','w')
# file.write(str(ciphertext))


# print ('Total time for encryption for 10MB file  :' + str(encr_time) +' microseconds' )
# total_speed = f_Size/ encr_time
# print('Total speed for encryption for 10MB file : ' + str(total_speed) + '  byte/microseconds')

# # Decrypt the ciphertext with the same key for 1 KB
# decry_start = time.time()
# decrypter = pyaes.Decrypter(pyaes.AESModeOfOperationCBC(key, iv))

# for line in open('cipher_2.txt'):  
#   decrypted = decrypter.feed(line)
# decry_stop =time.time()

# #to check total time for decryption
# decry_time = (decry_stop - decry_start)*1000000

# #print('Decrypted:', decrypted)
# print ('Total time for decryption for 10MB file  :' + str(decry_time) + +' microseconds')
# total_speed_1 = f_Size/ decry_time
# print('Total speed for decryption for 10MB file  : ' + str(total_speed_1) + '  byte/microsecond')

