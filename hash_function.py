# -*- coding: utf-8 -*-
"""Hash_function

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V-1RyqIx6queM0piVwS6OxwuZCh8TAq9
"""

# To compute Hash of 1kb file using SHA256 
import hashlib, os
import time

print('Hash of 1KB file using SHA256 : ')
with open('1kb.txt','rb') as f:
    bytes = f.read() # read entire file as bytes
    statinfo = os.stat('1kb.txt')
    f_Size= statinfo.st_size
    hash_start = time.time()
    
    readable_hash = hashlib.sha256(bytes).hexdigest();
    
    hash_stop = time.time()
    total_time = hash_stop - hash_start
    time_micro = total_time * 1000000
    
    print ('Total time taken to hash the 1 KB file is :   '  + str(time_micro) + ' microseconds')   
total_speed = f_Size/ time_micro
print('Total speed for Hashing per byte for 1KB file: ' + str(total_speed) + '  byte/microsecond')
    
  # To compute Hash of 1kb file using SHA256 
import hashlib
 
print('\nHash of 10MB file using SHA256 : ')
with open('10mb.txt','rb') as f:
    bytes = f.read() # read entire file as bytes
    statinfo = os.stat('1kb.txt')
    f_Size= statinfo.st_size
    hash_start = time.time()
    
    readable_hash = hashlib.sha256(bytes).hexdigest();
    
    hash_stop = time.time()
    total_time = hash_stop - hash_start
    time_micro = total_time * 1000000
    
total_speed = f_Size/ time_micro    
print ('Total time taken to hash the 10 MB file is :   ' + str(time_micro) +' microseconds')
print('Total speed for Hashing per byte for 10MB file: ' + str(total_speed) + '  byte/microsecond')

print('\n-------------------------------------------------------------------------------------------------')

# To compute Hash of 1kb file using SHA512 
import hashlib, os
import time

print('Hash of 1KB file using SHA512 : ')
with open('1kb.txt','rb') as f:
    bytes = f.read() # read entire file as bytes
    statinfo = os.stat('1kb.txt')
    f_Size= statinfo.st_size
    hash_start = time.time()
    
    readable_hash = hashlib.sha512(bytes).hexdigest();
    
    hash_stop = time.time()
    total_time = hash_stop - hash_start
    time_micro = total_time * 1000000
    
    print ('Total time taken to hash the 1 KB file is :   '  + str(time_micro) + ' microseconds')   
total_speed = f_Size/ time_micro
print('Total speed for Hashing per byte for 1KB file: ' + str(total_speed) + '  byte/microsecond')
    
  # To compute Hash of 1kb file using SHA512 
import hashlib
 
print('\nHash of 10MB file using SHA512 : ')
with open('10mb.txt','rb') as f:
    bytes = f.read() # read entire file as bytes
    statinfo = os.stat('1kb.txt')
    f_Size= statinfo.st_size
    hash_start = time.time()
    
    readable_hash = hashlib.sha512(bytes).hexdigest();
    
    hash_stop = time.time()
    total_time = hash_stop - hash_start
    time_micro = total_time * 1000000
    
total_speed = f_Size/ time_micro    
print ('Total time taken to hash the 10 MB file is :   ' + str(time_micro) +' microseconds')
print('Total speed for Hashing per byte for 10MB file: ' + str(total_speed) + '  byte/microsecond')

print('\n-------------------------------------------------------------------------------------------------')


# To compute Hash of 1kb file using SHA3_256 
import hashlib, os
import time

print('Hash of 1KB file using SHA3_256 : ')
with open('1kb.txt','rb') as f:
    bytes = f.read() # read entire file as bytes
    statinfo = os.stat('1kb.txt')
    f_Size= statinfo.st_size
    hash_start = time.time()
    
    readable_hash = hashlib.sha3_256(bytes).hexdigest();
    
    hash_stop = time.time()
    total_time = hash_stop - hash_start
    time_micro = total_time * 1000000
    
    print ('Total time taken to hash the 1 KB file is :   '  + str(time_micro) + ' microseconds')   
total_speed = f_Size/ time_micro
print('Total speed for Hashing per byte for 1KB file: ' + str(total_speed) + '  byte/microsecond')
    
  # To compute Hash of 1kb file using SHA3_256 
import hashlib
 
print('\nHash of 10MB file using SHA3_256 : ')
with open('10mb.txt','rb') as f:
    bytes = f.read() # read entire file as bytes
    statinfo = os.stat('1kb.txt')
    f_Size= statinfo.st_size
    hash_start = time.time()
    
    readable_hash = hashlib.sha512(bytes).hexdigest();
    
    hash_stop = time.time()
    total_time = hash_stop - hash_start
    time_micro = total_time * 1000000
    
total_speed = f_Size/ time_micro    
print ('Total time taken to hash the 10 MB file is :   ' + str(time_micro) +' microseconds')
print('Total speed for Hashing per byte for 10MB file: ' + str(total_speed) + '  byte/microsecond')

print('\n-------------------------------------------------------------------------------------------------')