# -*- coding: utf-8 -*-
"""CTR_128.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z51kbv-RvTgqlxTNHnj3J5ON7qwMhfiz
"""

# Code to create AES- 128 bit key and to encrypt and decrypt a text.txt file using AES in CTR mode

import pyaes,  binascii, os, secrets
import time

# Genrating the random key of size 128 bit that is 16 bytes, everytime a new key will be generated when u run this part of the code
key_start= time.time()
key=os.urandom(16)
key_end=time.time()

# to check the total time for key generation 
key_gen_time = (key_end - key_start) *1000000

#print('Genrated 128 bit key for CTR mode : ' + str(key) )
print( 'Key generation time :  ' + str(key_gen_time) + ' microseconds')


print('\n-------------------------------------------------------------------------------------------------------------------------------------------------------')

# Encrypt the SMALL text file stored in the variable plaintext with the given key produced in first step:

#create a initial vector iv
iv = secrets.randbits(128)

#read the text file
with open('1kb.txt','rb') as f :
  plaintext = f.read()
  statinfo = os.stat('1kb.txt')
  f_Size= statinfo.st_size


#perform the AES-256-CTR-Encryption using the text, key and iv
ency_start = time.time()
aes = pyaes.AESModeOfOperationCTR(key, pyaes.Counter(iv))
ciphertext = aes.encrypt(plaintext)
ency_stop = time.time()

#to check total time for encryption
encr_time = (ency_stop - ency_start)*1000000

#print the encrypted cipher text
#print('Encrypted:', binascii.hexlify(ciphertext))
print ('Total time for encryption for 1kb file :' + str(encr_time) + ' microseconds' )
total_speed = f_Size/ encr_time
print('Total speed for encryption per byte for 1kb file : ' + str(total_speed) + '  bytes/microseconds')

# Decrypt the ciphertext with the same key for SMALL file
decry_start = time.time()
aes = pyaes.AESModeOfOperationCTR(key, pyaes.Counter(iv))
decrypted = aes.decrypt(ciphertext)
decry_stop =time.time()

#to check total time for decryption
decry_time = (decry_stop - decry_start)*1000000

#print('Decrypted:', decrypted)
print ('Total time for decryption for 1kb file :' + str(decry_time) +' microseconds' )

total_speed_1 = f_Size/ decry_time
print('Total speed for decryption per byte for 1 kb file : ' + str(total_speed_1) + '  bytes/microsecond')

print('\n-------------------------------------------------------------------------------------------------------------------------------------------------------')
# Encrypt the LARGE text file stored in the variable plaintext with the given key produced in first step:

#create a initial vector iv
iv = secrets.randbits(128)

#read the text file
with open('10mb.txt','rb') as f :
  plaintext = f.read()
  statinfo = os.stat('10mb.txt')
  f_Size= statinfo.st_size


#perform the AES-256-CTR-Encryption using the text, key and iv
ency_start = time.time()
aes = pyaes.AESModeOfOperationCTR(key, pyaes.Counter(iv))
ciphertext = aes.encrypt(plaintext)
ency_stop = time.time()

#to check total time for encryption
encr_time = (ency_stop - ency_start)*1000000

#print the encrypted cipher text
#print('Encrypted:', binascii.hexlify(ciphertext))
print ('Total time for encryption for 10MB file :' + str(encr_time) + ' microseconds' )
total_speed = f_Size/ encr_time
print('Total speed for encryption per byte for 10MB file : ' + str(total_speed) + '  bytes/microseconds')

# Decrypt the ciphertext with the same key for LARGE text file
decry_start = time.time()
aes = pyaes.AESModeOfOperationCTR(key, pyaes.Counter(iv))
decrypted = aes.decrypt(ciphertext)
decry_stop =time.time()

#to check total time for decryption
decry_time = (decry_stop - decry_start)*1000000

#print('Decrypted:', decrypted)
print ('Total time for decryption for 10MB file :' + str(decry_time) +' microseconds' )

total_speed_1 = f_Size/ decry_time
print('Total speed for decryption per byte for 10MB file : ' + str(total_speed_1) + '  bytes/microseconds')



