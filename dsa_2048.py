# -*- coding: utf-8 -*-
"""DSA_2048.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sgmJJHVPVTyToN_14z3HgsyAwm_vvLAq
"""

import Crypto, os
import time
from Crypto.PublicKey import DSA
from Crypto.Signature import DSS
from Crypto.Hash import SHA256

#******************************************* DSA key generation , signing and verification for 1KB file ***************************************************
# Create a new DSA key
key_start = time.time()
key = DSA.generate(2048)
key_stop = time.time()
key_gen_time = (key_stop - key_start) * 1000000
print('Key Generation time for 1KB file is :  ' + str(key_gen_time) + ' microseconds')


# Sign the 1KB file
with open('1kb.txt','rb') as f :
  plaintext = f.read()
  statinfo = os.stat('1kb.txt')
  f_Size= statinfo.st_size
  
#Hash the input file
hash_start = time.time()
hash_obj = SHA256.new(plaintext)
hash_stop = time.time()
hash_total = (hash_stop - hash_start)*1000000
print('Total time taken for hashing while signing the 1KB file is :  ' + str(hash_total) + ' microseconds')
hash_speed = f_Size/hash_total
print('Total speed taken for hashing while signing the 1KB file is :  ' + str(hash_speed)+ ' bytes/microseconds')

#sign the 1KB file
sign_start = time.time()
signer = DSS.new(key, 'fips-186-3')
signature = signer.sign(hash_obj)
sign_stop = time.time()
total_sign_time = (sign_stop - sign_start)*1000000
print('Total time to produce a signature for 1KB file : ' + str(total_sign_time) + ' microseconds')

# Given the plaintext and signature compute the hash and verify the signature
hash_start = time.time()
hash_obj = SHA256.new(plaintext)
hash_stop = time.time()
hash_total = (hash_stop - hash_start)*1000000
print('Total time taken for hashing while verifying the signature for the 1KB file is :  ' + str(hash_total) + ' microseconds')
hash_speed = f_Size/hash_total
print('Total speed taken for hashing while verifying the signature for the 1KB file is :  ' + str(hash_speed)+ ' bytes/microseconds')


verify_sign_start = time.time()
verifier = DSS.new(key, 'fips-186-3')
# Verify the authenticity of the text file
try:
  verifier.verify(hash_obj, signature)
  verify_sign_stop = time.time()
  total_time_verify = (verify_sign_stop - verify_sign_start) * 1000000
  print( "The time to verify the signature on 1KB file is : " + str(total_time_verify)+ ' microseconds')
except ValueError:
  print( "The text file is not authentic")
  
print('\n----------------------------------------------------------------------------') 

#******************************************* DSA key generation , signing and verification for 10 MB file ***************************************************

# Create a new DSA key
key_start = time.time()
key = DSA.generate(2048)
key_stop = time.time()
key_gen_time = (key_stop - key_start) * 1000000
print('\nKey Generation time for 10MB file is :  ' + str(key_gen_time)+ ' microseconds')


# Sign the 1KB file
with open('10mb.txt','rb') as f :
  plaintext = f.read()
  statinfo = os.stat('10mb.txt')
  f_Size= statinfo.st_size
  
#Hash the input file
hash_start = time.time()
hash_obj = SHA256.new(plaintext)
hash_stop = time.time()
hash_total = (hash_stop - hash_start)*1000000
print('Total time taken for hashing while signing the 10 MB file is :  ' + str(hash_total)+ ' microseconds')
hash_speed = f_Size/hash_total
print('Total speed taken for hashing while signing the 10 MB file is :  ' + str(hash_speed)+ ' bytes/microseconds')

#sign the 10MB file
sign_start = time.time()
signer = DSS.new(key, 'fips-186-3')
signature = signer.sign(hash_obj)
sign_stop = time.time()
total_sign_time = (sign_stop - sign_start)*1000000
print('Time to produce a signature for 10MB file : ' + str(total_sign_time) + ' microseconds')

# Given the plaintext and signature compute the hash and verify the signature
hash_start = time.time()
hash_obj = SHA256.new(plaintext)
hash_stop = time.time()
hash_total = (hash_stop - hash_start)*1000000
print('Total time taken for hashing while verifying the signature for the 10MB file is :  ' + str(hash_total)+ ' microseconds')
hash_speed = f_Size/hash_total
print('Total speed taken for hashing while verifying the signature for the 10MB file is :  ' + str(hash_speed)+ ' bytes/microseconds')

verify_sign_start = time.time()
verifier = DSS.new(key, 'fips-186-3')
# Verify the authenticity of the text file
try:
  verifier.verify(hash_obj, signature)
  verify_sign_stop = time.time()
  total_time_verify = (verify_sign_stop - verify_sign_start) * 1000000
  print( "The time to verify the signature on 10MB file is : " + str(total_time_verify)+ ' microseconds')
except ValueError:
  print( "The text file is not authentic")

pip install pycryptodome==3.4.3